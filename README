README libroboint
==========
libroboint - Open Source version of the fischertechnik ROBO Interface Library for Unix like systems - Version 0.4.4

The goal is to create a library that is fully compatible with the ftlib by knobloch eletronic.

The latest version will also be available at http://defiant.homedns.org/~erik/ft/libft/

This library should work on any systems supported by libusb, like Linux, BSD and Mac OS X.

Included is the helper program "ftuploader" which allows you to upload programs to the Robo Interface.
Running ftuploader --help should give you an idea how to use it.
Also included is an Interface Diagnose utility. See section Interface Diagnose


Requirements:
<---------->
libusb - http://libusb.sourceforge.net/
cmake at least version 2.4 - http://cmake.org
pthreads (Should be included with every modern posix compatible OS)


Author:
<---------->
Erik Andresen - erik@vontaene.de

Please contact me for bugs or any suggestions


Compiling:
<---------->
cmake .
make

You can now test the example by executing
./example/example

Type make doc to create the html documentation in doc/


Installing:
<---------->
make install
After installing you should run
ldconfig
to make the library known to your system. Make sure that /etc/ld.so.conf is configured to include /usr/local/lib

To install the diagnose utility type
make diag

Debian packages are available. Please read http://vontaene.de/apt/README.txt.
You can install them with apt-get install libroboint-all


Permissions:
<---------->
When running udev you might want to copy the file fischertechnik.rules from the udev folder to /etc/udev/rules.d/ to get the correct permissions.
Udev then needs a reload with
udevadm control --reload-rules (current udev)
or 
udevcontrol reload_rules (on old udev versions)
You will also now need to replug your device.


How to use:
<---------->
example/example.c should give you a first idea on how to start

Check the doc/html/index.html for more details.


Python:
<---------->
A simple Python interface to this library is available, see the python folder for details.
So far only the basics (Motor, Digital inputs) are supported.
You can type
make python
to install the python module and check the example.py for how to use it


Interface Diagnose 
<---------->
You can find it in the folder diag/.
It requires the python module (see above) and PyQT4. You can launch it by running "sh ftdiagnose"


Additional notes:
<---------->
The windows notifications are not supported of course.

We use long int for DWORD, unsigned char for BYTE, char * for LPCSTR and voic * for LPVOID

Not everything of the original function is supported. It is unlikely that this library will ever support the full ftlib,
since the Knobloch electronic GmbH refused to give me the full documentation.
They have however released the specifications for the serial documentation and most of that also works with USB.
The upload protocol has been hardly reverse engineered.


License/Copyright:
<---------->
LGPL, see license.txt


Changes:
<---------->
0.5:	-Libft renamed to libroboint to avoid name clashes with other software
	-C Header file renamed to roboint.h
0.4.4:  -Some Bug fixes, fixes to work with Fedora 14
0.4.3:  -Bug fix: Extension digital inputs at RoboRF
	-ftdiagnose: Display connection status
	-Added functions: (not in Knobloch lib):
		-IsFtInterfaceConnected()
	-Python added functions:
		-IsConnected()
0.4.2:	-Python support to open the interface by serial
	-Some Bug fixes
	-Added functions: (not in Knobloch lib)
		-SetRealSerial()
0.4.1:	-Added support to change the RF address.
	-Added functions: (not in Knobloch lib)
		-SetRFMode()
		-GetRFMode()
	-Added support for functions:
		-GetFtManufacturerStrg()
		-GetFtShortNameStrg()
		-GetFtLongNameStrg()
		-GetFtLibErrorString()
	-Some minor Bug fixes
0.4:	-Hopefully support for more then one Robo Interface attached to an RF Link.
		-InitFtUsbDeviceList() will now also count the number of Robo Interfaces attached to an RF Link
	-Added support for the ft distance sensor
	-Added functions:
		-GetFtDeviceTypeString() (not in Knobloch lib)
	-Added support for functions:
		-SetFtDistanceSensorMode()
	-Python added functions:
		-GetNumFtUsbDevices()
		-RoboInterface.GetDeviceTypeString()
		-GetD1()
		-GetD2()
	-Added ft Diagnose utility.
0.3:	-fixed analog values > 512 (sorry!)
	-Python: enhanced SetMotor() and added SetOutput(), fixes for platform != Linux
	-added simple Diagnose Monitor - yeah!
0.3:	-added (overwrite) --target option to the ftuploader
	-included some documentation
	-minor fixes
	-enhanced python layer
	-support for RF Module
0.2.1:	-fixed Analog/Voltage Sensor calculations
0.2:	-added udev file
	-experimental support for uploading to the interface (usb only)
	-included program ftuploader
	-add support for functions:
		-DownloadFtProgram()
		-StartFtProgram()
		-StopFtProgram()
		-DeleteFtProgram()
		-SetFtProgramActiv()
		-GetFtProgramName()
		-GetFtStatus()
		-GetFtFirmware()
		-GetFtFirmwareStrg()
		-GetFtSerialNr()
		-GetFtSerialNrStrg()


TODO:
<---------->
-find out what the value from GetAV() does mean
-debian: example.c => /usr/share/doc/libroboint-dev/examples/
-read/write mem? robointerpreter.c, line 1110
-program dl over serial (check robodummy, line 1340)
-start/stop program over RF - where to sniff from?
-java layer
-Firmware upload support, also see robodummy, robointerpreter.c, line 1190
-file in /usr/share/applications?

